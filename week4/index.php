<!DOCTYPE html>
<html>
<head>
	
	<title>
		test 
	</title>
</head>
<body>
<script>
(async() => {

  const requestModule = ({url, dataURL = true}) => 
    new Promise((resolve, reject) => {
      const request = new XMLHttpRequest();
      const reader = new FileReader();
      reader.onload = () => { resolve(reader.result) };
      request.open("GET", url);
      request.responseType = "blob";
      request.onload = () => { reader[dataURL ? "readAsDataURL" : "readAsText"](request.response) };
      request.send();
   })
  
  let moduleName = `box`;
  // get `Mod` module
  let moduleRequest = await requestModule({url:"box.js"});

  // do stuff with `Mod`; e.g., `console.log(Mod)`
  let scriptModule = `import ${moduleName} from "${moduleRequest}"`;
  let script = document.createElement("script");
  script.type = "module";
  script.textContent = scriptModule;
  document.body.appendChild(script);
 console.log(script);
})();
</script>
<script type="module" >
	import {Runtime, Inspector} from "https://cdn.jsdelivr.net/npm/@observablehq/runtime@4/dist/runtime.js";
	// import box from "./example.js";
	// import box from "./box.js";
	import box from "data:application/javascript;base64,";
	new Runtime().module(box, Inspector.into(document.body));
    // import define from "./box.js";
    // new runtime.module();
    // console.log(d.date);
    // window.onload=function(){
    // return main;}
</script>

</body>
</html>


